#!/usr/bin/env python

"""
Copyright Netherlands eScience Center

Function        : Calculate geopotential on model level for ERA-Interim
Author          : Yang Liu
Date            : 2017.6.14
Last Update     : 2017.6.26
Description     : The code aims to calculate the geopotential on the model levels
                  for the reanalysis dataset ERA-Interim from ECMWF. It is made
                  for the dataset "ERA-Interim" only. Since the sigma level for
                  different dataset could vary a lot, it could not be used to deal
                  with other datasets from ECMWF!
Return Value    : NetCFD4 data file
Dependencies    : os, time, numpy, netCDF4, math, sys
variables       : Temperature                       T
                  Specific Humidity                 q
                  logarithmic Surface Pressure      lnsp
                  Surface Geopotential              z
                  Model Levels

"""
import numpy as np
import time as tttt
from netCDF4 import Dataset,num2date
import os
import platform
import math
import sys

# print the system structure and the path of the kernal
print platform.architecture()
print os.path

# calculate the time for the code execution
start_time = tttt.time()

################################   Input zone  ######################################
# specify data path
datapath = 'F:\DataBase\ERA_Interim\Subdaily\model_daily_075_1980'
# time of the data, which concerns with the name of input
year = 1980
# specify output path for the netCDF4 file
output_path = 'F:\DataBase\ERA_Interim\Subdaily\model_daily_075_1980'
####################################################################################

# Extract all the variables
def data_extract (datapath_T,datapath_q,datapath_z,datapath_lnsp):
    # check the existance of the file (only for one file)
    if not os.path.isfile(datapath_T):
        print 'file %s not found' % datapath_T
        sys.exit(1)
    #check if the file is readable
    if not os.access(datapath_T, os.R_OK):
        print 'file %s not readable' % datapath_T
        sys.exit(1)
    # load data
    file_T = Dataset(datapath_T)
    file_q = Dataset(datapath_q)
    file_z = Dataset(datapath_z)
    file_lnsp = Dataset(datapath_lnsp)
    # print the attributes of each file
    # print all the attributes in file_T
    for k in file_T.variables:
        print file_T.variables['%s' % k]
    # print our interested variables in other files
    print file_q.variables['q']
    print file_z.variables['z']
    print file_lnsp.variables['lnsp']
    # check if the time for all the variables is the same
    t_T = file_T.variables['time'][0]
    t_q = file_q.variables['time'][0]
    t_z = file_z.variables['time'][0]
    t_lnsp = file_lnsp.variables['time'][0]
    time_check = t_T*3-t_q-t_z-t_lnsp
    if not time_check == 0:
        print 'The time of each dataset is not the same! '
        sys.exit(2)
    # extract variables for the computation of geopotential
    T = file_T.variables['t'][:]
    q = file_q.variables['q'][:]
    z = file_z.variables['z'][:]
    lnsp = file_lnsp.variables['lnsp'][:]
    # extract variables for wrapping a netCDF4 file
    time = file_T.variables['time'][:]
    level = file_T.variables['level'][:]
    latitude = file_T.variables['latitude'][:]
    longitude = file_T.variables['longitude'][:]
    # print all the details of the variables
    print '*******************************************************************'
    print 'There are %d days in this month' % (len(time)/4)
    print 'The coordinates include %d vertical levels' % (len(level))
    print 'The grid employs %d points in latitude, and %d points in longitude' % (len(latitude),len(longitude))
    print '*******************************************************************'
    print 'Extract all the variables successfully'
    return T,q,z,lnsp,time,level,latitude,longitude

# compute geopotential on the model level of ERA-Interim
def calc_geopotential(T, q, z, lnsp, time, level, latitude, longitude):
    # define the constants
    # gas constant of dry air (J/(kg*K))
    R_dry = 286.9
    # gas constant for water vapour
    R_vap = 461.5
    # calculate the surface pressure
    # the unit of pressure here is Pa!
    sp = np.exp(lnsp)
    # A and B values for the definition of sigma levelist
    # Since there are 60 model levels, there are 61 half levels, so it is for A and B values
    A = np.array([
      0.0000000000e+000, 2.0000000000e+001, 3.8425338745e+001, 6.3647796631e+001, 9.5636962891e+001,
      1.3448330688e+002, 1.8058435059e+002, 2.3477905273e+002, 2.9849584961e+002, 3.7397192383e+002,
      4.6461816406e+002, 5.7565112305e+002, 7.1321801758e+002, 8.8366040039e+002, 1.0948347168e+003,
      1.3564746094e+003, 1.6806403809e+003, 2.0822739258e+003, 2.5798886719e+003, 3.1964216309e+003,
      3.9602915039e+003, 4.9067070313e+003, 6.0180195313e+003, 7.3066328125e+003, 8.7650546875e+003,
      1.0376125000e+004, 1.2077445313e+004, 1.3775324219e+004, 1.5379804688e+004, 1.6819472656e+004,
      1.8045183594e+004, 1.9027695313e+004, 1.9755109375e+004, 2.0222203125e+004, 2.0429863281e+004,
      2.0384480469e+004, 2.0097402344e+004, 1.9584328125e+004, 1.8864750000e+004, 1.7961359375e+004,
      1.6899468750e+004, 1.5706449219e+004, 1.4411125000e+004, 1.3043218750e+004, 1.1632757813e+004,
      1.0209500000e+004, 8.8023554688e+003, 7.4388046875e+003, 6.1443164063e+003, 4.9417773438e+003,
      3.8509133301e+003, 2.8876965332e+003, 2.0637797852e+003, 1.3859125977e+003, 8.5536181641e+002,
      4.6733349609e+002, 2.1039389038e+002, 6.5889236450e+001, 7.3677425385e+000, 0.0000000000e+000,
      0.0000000000e+000,],dtype=float)
    B = np.array([
      0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000,
      0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000,
      0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000,
      0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000,
      0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 0.0000000000e+000, 7.5823496445e-005,
      4.6139489859e-004, 1.8151560798e-003, 5.0811171532e-003, 1.1142909527e-002, 2.0677875727e-002,
      3.4121163189e-002, 5.1690407097e-002, 7.3533833027e-002, 9.9674701691e-002, 1.3002252579e-001,
      1.6438430548e-001, 2.0247590542e-001, 2.4393314123e-001, 2.8832298517e-001, 3.3515489101e-001,
      3.8389211893e-001, 4.3396294117e-001, 4.8477154970e-001, 5.3570991755e-001, 5.8616840839e-001,
      6.3554745913e-001, 6.8326860666e-001, 7.2878581285e-001, 7.7159661055e-001, 8.1125342846e-001,
      8.4737491608e-001, 8.7965691090e-001, 9.0788388252e-001, 9.3194031715e-001, 9.5182150602e-001,
      9.6764522791e-001, 9.7966271639e-001, 9.8827010393e-001, 9.9401944876e-001, 9.9763011932e-001,
      1.0000000000e+000,],dtype=float)
    # define the half level pressure matrix
    p_half_plus = np.zeros((len(time),len(level),len(latitude),len(longitude)),dtype = float)
    p_half_minus = np.zeros((len(time),len(level),len(latitude),len(longitude)),dtype = float)
    # calculate the index of pressure levels
    index_level = np.arange(len(level))
    # calculate the pressure at each half level
    for i in index_level:
        p_half_plus[:,i,:,:] = A[i+1] + B[i+1] * sp
        p_half_minus[:,i,:,:] = A[i] + B[i] * sp
    # calculate full pressure level
    level_full = (p_half_plus + p_half_minus) / 2
    # compute the moist temperature (virtual temperature)
    Tv = T * (1 + (R_vap / R_dry - 1) * q)
    # initialize the first half level geopotential
    gz_half = np.zeros((len(time),len(latitude),len(longitude)),dtype =float)
    # initialize the full level geopotential
    gz = np.zeros((len(time),len(level),len(latitude),len(longitude)),dtype = float)
    # Calculate the geopotential at each level
    # The integral should be taken from surface level to the TOA
    for i in index_level:
        # reverse the index
        i_inverse = len(level) - 1 - i
        # the ln(p_plus/p_minus) is calculated, alpha is defined
        # an exception lies in the TOA
        # see equation 2.23 in ECMWF IFS 9220
        if i_inverse == 0:
            ln_p = np.log(p_half_plus[:,i_inverse,:,:]/10)
            alpha = np.log(2)
        else:
            ln_p = np.log(p_half_plus[:,i_inverse,:,:]/p_half_minus[:,i_inverse,:,:])
            delta_p = p_half_plus[:,i_inverse,:,:] - p_half_minus[:,i_inverse,:,:]
            alpha = 1 - p_half_minus[:,i_inverse,:,:] / delta_p * ln_p
        # calculate the geopotential of the full level (exclude surface geopotential)
        # see equation 2.22 in ECMWF IFS 9220
        gz_full = gz_half + alpha * R_dry * Tv[:,i_inverse,:,:]
        # add surface geopotential to the full level
        # see equation 2.21 in ECMWF IFS 9220
        gz[:,i_inverse,:,:] = z + gz_full
        # renew the half level geopotential for next loop step (from p_half_minus level to p_half_plus level)
        # see equation 2.20 in ECMWF IFS 9220
        gz_half = gz_half + ln_p * R_dry * Tv[:,i_inverse,:,:]
    print '*******************************************************************'
    print "***Computation of geopotential on each pressure level is finished**"
    print '*******************************************************************'
    # Take the maximum and minimum of geopotential for the calculation of scaling and offset factor
    gz_max = np.amax(gz)
    gz_min = np.amin(gz)

    return gz,level_full,gz_max,gz_min

# Calculate scale factor and offset for packing data in netcdf
def compute_scale_and_offset(max_a, min_a, n):
    # stretch/compress data to the available packed range
    scale_factor = (max_a - min_a) / (2 ** n - 1)
    # translate the range to be symmetric about zero
    add_offset = min_a + 2 ** (n - 1) * scale_factor
    return (scale_factor, add_offset)

# create netcdf file for geopotential
def create_netcdf_gz (gz,time,level,latitude,longitude,scale_factor,add_offset,output_name):
    print '*******************************************************************'
    print '*********************** create netcdf file*************************'
    print '*******************************************************************'
    # wrap the geo-potential datasets into netcdf file
    # 'NETCDF3_CLASSIC', 'NETCDF3_64BIT', 'NETCDF4_CLASSIC', and 'NETCDF4'
    data_wrap = Dataset(output_path+os.sep+output_name,'w',format = 'NETCDF3_64BIT')
    # create dimensions for netcdf data
    time_wrap_dim = data_wrap.createDimension('time',len(time))
    level_wrap_dim = data_wrap.createDimension('level',len(level))
    lat_wrap_dim = data_wrap.createDimension('latitude',len(latitude))
    lon_wrap_dim = data_wrap.createDimension('longitude',len(longitude))
    # create coordinate variables for 4-dimensions
    time_warp_var = data_wrap.createVariable('time',np.int32,('time',))
    level_warp_var = data_wrap.createVariable('level',np.int32,('level',))
    lat_warp_var = data_wrap.createVariable('latitude',np.float32,('latitude',))
    lon_warp_var = data_wrap.createVariable('longitude',np.float32,('longitude',))
    # create the actual 4-d variable
    gz_warp_var = data_wrap.createVariable('gz',np.int16,('time','level','latitude','longitude'))
    # global attributes
    data_wrap.description = 'Geopotential calculated on model levels'
    # variable attributes
    lat_warp_var.units = 'degree_north'
    lon_warp_var.units = 'degree_east'
    level_warp_var.units = 'hPa'
    gz_warp_var.units = 'm**2 s**-2'
    # apply the scale factor and offset for packing
    gz_warp_var.scale_factor = scale_factor
    gz_warp_var.add_offset = add_offset
    time_warp_var.units = 'hours since 1900-01-01 00:00:0.0'
    time_warp_var.calender = 'gregorian'
    # writing data
    lat_warp_var[:] = latitude
    lon_warp_var[:] = longitude
    level_warp_var[:] = level
    time_warp_var[:] = time
    gz_warp_var[:] = gz
    # close the file
    data_wrap.close()
    print "Create netcdf file successfully"

# main function

if __name__=="__main__":
    # create the month index
    index_month = np.arange(1,13,1)
    # extract data, calculate geopotential, write as netcdf4 file
    for i in index_month:
        # specify the location of datasets
        datapath_T = datapath+os.sep+'model_daily_075_%d_%d_T.nc' % (year,i)
        datapath_q = datapath+os.sep+'model_daily_075_%d_%d_q.nc' % (year,i)
        datapath_z = datapath+os.sep+'model_daily_075_%d_%d_z.nc' % (year,i)
        datapath_lnsp = datapath+os.sep+'model_daily_075_%d_%d_lnsp.nc' % (year,i)
        # extract data
        T,q,z,lnsp,time,level,latitude,longitude = data_extract(datapath_T,datapath_q,datapath_z,datapath_lnsp)
        # calculate geopotential
        gz,level_full,gz_max,gz_min = calc_geopotential(T,q,z,lnsp,time,level,latitude,longitude)
        # specify the number of bits for packing
        n_int = 16
        # calculate scale and offset factor for saving netcdf file
        scale_factor, add_offset = compute_scale_and_offset(gz_max, gz_min, n_int)
        # save geopotential to a netcdf file (lossy compression technique)
        output_name = 'model_daily_075_%d_%d_gz.nc' % (year,i)
        create_netcdf_gz(gz,time,level,latitude,longitude,scale_factor,add_offset,output_name)
    print 'Computation of geopotenial on model level for ERA-Interim is complete!!!'

print ("--- %s minutes ---" % ((tttt.time() - start_time)/60))
