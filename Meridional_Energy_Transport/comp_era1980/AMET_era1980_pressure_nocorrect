#!/usr/bin/env python

"""
Copyright Netherlands eScience Center

Function        : Calculate AMET with era1980 on pressure level without mass correction
Author          : Yang Liu
Date            : 2017.8.27
Last Update     : 2017.8.27
Description     : The code aims to calculate the atmospheric meridional energy
                  transport based on atmospheric reanalysis dataset ERA-Interim
                  from ECMWF. The calculation is based on era1980 on pressure level.
                  No mass correction is applied.

Return Value    : NetCFD4 data file
Dependencies    : os, time, numpy, netCDF4, sys, matplotlib
variables       : Absolute Temperature              T
                  Specific Humidity                 q
                  Pressure                          lnsp
                  Zonal Divergent Wind              u
                  Meridional Divergent Wind         v
                  geopotential                      z
"""
import numpy as np
import time as tttt
from netCDF4 import Dataset,num2date
import os
import platform
import sys
import logging
import matplotlib.pyplot as plt

##########################################################################
###########################   Units vacabulory   #########################
# cpT:  [J / kg K] * [K]     = [J / kg]
# Lvq:  [J / kg] * [kg / kg] = [J / kg]
# gz in [m2 / s2] = [ kg m2 / kg s2 ] = [J / kg]

# multiply by v: [J / kg] * [m / s] => [J m / kg s]
# sum over longitudes [J m / kg s] * [ m ] = [J m2 / kg s]

# integrate over pressure: dp: [Pa] = [N m-2] = [kg m2 s-2 m-2] = [kg s-2]
# [J m2 / kg s] * [Pa] = [J m2 / kg s] * [kg / s2] = [J m2 / s3]
# and factor 1/g: [J m2 / s3] * [s2 /m2] = [J / s] = [Wat]
##########################################################################

# print the system structure and the path of the kernal
print platform.architecture()
print os.path

# calculate the time for the code execution
start_time = tttt.time()

# Redirect all the console output to a file
#sys.stdout = open('F:\DataBase\ERA_Interim\console.out','w')

# logging level 'DEBUG' 'INFO' 'WARNING' 'ERROR' 'CRITICAL'
#logging.basicConfig(filename = 'F:\DataBase\ERA_Interim\history.log', filemode = 'w',level = logging.DEBUG,
#                    format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
#logging.basicConfig(filename = '/data/Reanalysis/ERA_Interim/Subdaily/Model/history.log', filemode = 'w', level = logging.DEBUG, format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# define the constant:
constant ={'g' : 9.80616,      # gravititional acceleration [m / s2]
           'R' : 6371009,      # radius of the earth [m]
           'cp': 1004.64,      # heat capacity of air [J/(Kg*K)]
           'Lv': 2264670,      # Latent heat of vaporization [J/Kg]
           'R_dry' : 286.9,    # gas constant of dry air [J/(kg*K)]
           'R_vap' : 461.5,    # gas constant for water vapour [J/(kg*K)]
            }

################################   Input zone  ######################################
# specify data path
datapath = 'F:\DataBase\ERA_Interim\Subdaily'
# datapath = '/project/ERA-Interim/Subdaily/Model/'
# time of the data, which concerns with the name of input
# starting time (year)
start_year = 1980
# Ending time, if only for 1 year, then it should be the same as starting year
end_year = 1980
# specify output path for the netCDF4 file
output_path = 'F:\DataBase\ERA_Interim\Subdaily'
# benchmark datasets for basic dimensions
benchmark_path = 'F:\DataBase\ERA_Interim\Subdaily\pressure_daily_075_1980\pressure_daily_075_1980_1_z.nc'
benchmark = Dataset(benchmark_path)
####################################################################################

def var_key(datapath, year, month):
    # get the path to each datasets
    print "Start retrieving datasets"
    #logging.info("Start retrieving variables T,q,v,z for from %d (y) - %d (m)" % (year,month))
    datapath_T = datapath + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'pressure_daily_075_%d_%d_T_q.nc' % (year,month)
    datapath_q = datapath + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'pressure_daily_075_%d_%d_T_q.nc' % (year,month)
    datapath_u = datapath + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'pressure_daily_075_%d_%d_u_v.nc' % (year,month)
    datapath_v = datapath + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'pressure_daily_075_%d_%d_u_v.nc' % (year,month)
    datapath_z = datapath + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'pressure_daily_075_%d_%d_z.nc' % (year,month)
    # get the variable keys
    T_key = Dataset(datapath_T)
    q_key = Dataset(datapath_q)
    u_key = Dataset(datapath_u)
    v_key = Dataset(datapath_v)
    z_key = Dataset(datapath_z)
    print "Retrieving datasets successfully!"
    #logging.info("Retrieving variables for from %d (y) - %d (m) successfully!" % (year,month))
    return T_key, q_key, u_key, v_key, z_key

def meridional_energy_transport(T_key,q_key,u_key,v_key,z_key):
    # extract variables
    print "Start extracting variables for the quantification of meridional energy transport."
    T = T_key.variables['t'][:]
    q = q_key.variables['q'][:]
    u = v_key.variables['u'][:]
    v = v_key.variables['v'][:]
    z = z_key.variables['z'][:]
    # Extract dimension info
    #time = v_key.variables['time'][:]
    level = v_key.variables['level'][:]
    latitude = v_key.variables['latitude'][:]
    longitude = v_key.variables['longitude'][:]
    print 'Extracting variables successfully!'
    #logging.info("Extracting variables successfully!")

    print 'Start calculating meridional energy transport on pressure level'
    # calculate dp based on mean value of surface pressure
    dp_level = np.zeros(len(level),dtype = float)
    # calculate the index of pressure levels
    index_level = np.arange(len(level))
    for i in index_level:
        if i ==0:
            dp_level[i] = level[i]
        else:
            dp_level[i] = level[i] - level[i-1]
    # calculate each component of total energy
    # Internal Energy cpT
    internal_flux = constant['cp'] * np.mean(v * T, 0)
    # Latent heat Lq
    latent_flux = constant['Lv'] * np.mean(v * q, 0)
    # geopotential
    geopotential_flux = np.mean(v * z, 0)
    # kinetic energy
    kinetic_flux = np.mean (v * 1/2 *(u**2 + v**2), 0)
    # specify matrix for integral of vertical flux
    meridional_E_internal_point = np.zeros((len(latitude),len(longitude)),dtype=float)
    meridional_E_latent_point = np.zeros((len(latitude),len(longitude)),dtype=float)
    meridional_E_geopotential_point = np.zeros((len(latitude),len(longitude)),dtype=float)
    meridional_E_kinetic_point = np.zeros((len(latitude),len(longitude)),dtype=float)
    meridional_E_point = np.zeros((len(latitude),len(longitude)),dtype=float)
    # calculate zonal & meridional grid size on earth
    # the earth is taken as a perfect sphere, instead of a ellopsoid
    dx = 2 * np.pi * constant['R'] * np.cos(2 * np.pi * latitude / 360) / len(longitude)
    dx[0] = 0
    dx[-1] = 0
    # take the vertical integral
    #!!!!!!!!!!!!!!! The unit is tera-watt (TW) !!!!!!!!!!!!!!!!!!!!!!#
    for i in np.arange(len(latitude)):
        for j in np.arange(len(longitude)):
            meridional_E_internal_point[i,j] = np.sum(internal_flux[:,i,j]*dp_level/constant['g']* dx[i]/1e+12*100, 0)
            meridional_E_latent_point[i,j] = np.sum(latent_flux[:,i,j]*dp_level/constant['g']* dx[i]/1e+12*100, 0)
            meridional_E_geopotential_point[i,j] = np.sum(geopotential_flux[:,i,j]*dp_level/constant['g']* dx[i]/1e+12*100, 0)
            meridional_E_kinetic_point[i,j] = np.sum(kinetic_flux[:,i,j]*dp_level/constant['g']* dx[i]/1e+12*100, 0)
    meridional_E_point = meridional_E_internal_point + meridional_E_latent_point + meridional_E_geopotential_point + meridional_E_kinetic_point
    # take the zonal integral
    meridional_E_internal = np.sum(meridional_E_internal_point,1)
    meridional_E_latent = np.sum(meridional_E_latent_point,1)
    meridional_E_geopotential = np.sum(meridional_E_geopotential_point,1)
    meridional_E_kinetic = np.sum(meridional_E_kinetic_point,1)
    meridional_E = np.sum(meridional_E_point,1)
    print '*****************************************************************************'
    print "***Computation of meridional energy transport in the atmosphere is finished**"
    print "************         The result is in tera-watt (1E+12)          ************"
    print '*****************************************************************************'
    #logging.info("Computation of meridional energy transport on pressure level is finished!")

    return meridional_E, meridional_E_internal, meridional_E_latent, meridional_E_geopotential, meridional_E_kinetic, \
    meridional_E_point, meridional_E_internal_point, meridional_E_latent_point, meridional_E_geopotential_point, meridional_E_kinetic_point

# make plots
def visualization(E_total,E_internal,E_latent,E_geopotential,E_kinetic,output_path,year):
    print "Start making plots for the total meridional energy transport and each component."
    #logging.info("Start making plots for the total meridional energy transport and each component.")
    # calculate monthly mean of total energy transport
    # unit change from tera to peta (from 1E+12 to 1E+15)
    E_total_monthly_mean = np.mean(E_total,0)/1000
    E_internal_monthly_mean = np.mean(E_internal,0)/1000
    E_latent_monthly_mean = np.mean(E_latent,0)/1000
    E_geopotential_monthly_mean = np.mean(E_geopotential,0)/1000
    E_kinetic_monthly_mean = np.mean(E_kinetic,0)/1000
    # take latitude data from benchmark variable
    Lat = benchmark.variables['latitude'][:]
    # create a 0 line
    Reference = np.zeros(len(Lat))

    # Plot the total meridional energy transport against the latitude
    fig1 = plt.figure()
    plt.plot(Lat,E_total_monthly_mean,'b-',label='ECMWF')
    #plt.hold()
    plt.plot(Lat,Reference,'r--',label='0')
    plt.title('Total Atmospheric Meridional Energy Transport %d' % (year))
    #plt.legend()
    plt.xlabel("Laitude")
    plt.xticks(np.linspace(-90,90,13))
    plt.ylabel("Meridional Energy Transport (PW)")
    #plt.show()
    fig1.savefig(output_path + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'Meridional_Energy_total_%d.jpg' % (year), dpi = 400)

    # Plot the meridional internal energy transport against the latitude
    fig2 = plt.figure()
    plt.plot(Lat,E_internal_monthly_mean,'b-',label='ECMWF')
    #plt.hold()
    plt.plot(Lat,Reference,'r--',label='0')
    plt.title('Atmospheric Meridional Internal Energy Transport %d' % (year))
    #plt.legend()
    plt.xlabel("Laitude")
    plt.xticks(np.linspace(-90,90,13))
    plt.ylabel("Meridional Energy Transport (PW)")
    #plt.show()
    fig2.savefig(output_path + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'Meridional_Energy_internal_%d.jpg' % (year), dpi = 400)

    # Plot the meridional latent energy transport against the latitude
    fig3 = plt.figure()
    plt.plot(Lat,E_latent_monthly_mean,'b-',label='ECMWF')
    #plt.hold()
    plt.plot(Lat,Reference,'r--',label='0')
    plt.title('Atmospheric Meridional Latent Energy Transport %d' % (year))
    #plt.legend()
    plt.xlabel("Laitude")
    plt.xticks(np.linspace(-90,90,13))
    plt.ylabel("Meridional Energy Transport (PW)")
    #plt.show()
    fig3.savefig(output_path + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'Meridional_Energy_latent_%d.jpg' % (year), dpi = 400)

    # Plot the meridional geopotential energy transport against the latitude
    fig4 = plt.figure()
    plt.plot(Lat,E_geopotential_monthly_mean,'b-',label='ECMWF')
    #plt.hold()
    plt.plot(Lat,Reference,'r--',label='0')
    plt.title('Atmospheric Meridional Geopotential Energy Transport %d' % (year))
    #plt.legend()
    plt.xlabel("Laitude")
    plt.xticks(np.linspace(-90,90,13))
    plt.ylabel("Meridional Energy Transport (PW)")
    #plt.show()
    fig4.savefig(output_path + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'Meridional_Energy_geopotential_%d.jpg' % (year), dpi = 400)

    # Plot the meridional geopotential energy transport against the latitude
    fig5 = plt.figure()
    plt.plot(Lat,E_kinetic_monthly_mean,'b-',label='ECMWF')
    #plt.hold()
    plt.plot(Lat,Reference,'r--',label='0')
    plt.title('Atmospheric Meridional Kinetic Energy Transport %d' % (year))
    #plt.legend()
    plt.xlabel("Laitude")
    plt.xticks(np.linspace(-90,90,13))
    plt.ylabel("Meridional Energy Transport (PW)")
    #plt.show()
    fig5.savefig(output_path + os.sep + 'pressure_daily_075_%d' % (year) + os.sep + 'Meridional_Energy_kinetic_%d.jpg' % (year), dpi = 400)
    #logging.info("The generation of plots for the total meridional energy transport and each component is complete!")

# save output datasets
def create_netcdf_point (meridional_E_point_pool,meridional_E_internal_point_pool,meridional_E_latent_point_pool,meridional_E_geopotential_point_pool,meridional_E_kinetic_point_pool,output_path,year):
    print '*******************************************************************'
    print '*********************** create netcdf file*************************'
    print '*******************************************************************'
    #logging.info("Start creating netcdf file for total meridional energy transport and each component at each grid point.")
    # wrap the datasets into netcdf file
    # 'NETCDF3_CLASSIC', 'NETCDF3_64BIT', 'NETCDF4_CLASSIC', and 'NETCDF4'
    data_wrap = Dataset(output_path+os.sep+'pressure_daily_075_%d' % (year) + os.sep + 'pressure_daily_075_%d_E_point.nc' % (year),'w',format = 'NETCDF3_64BIT')
    # create dimensions for netcdf data
    month_wrap_dim = data_wrap.createDimension('month',Dim_month)
    lat_wrap_dim = data_wrap.createDimension('latitude',Dim_latitude)
    lon_wrap_dim = data_wrap.createDimension('longitude',Dim_longitude)
    # create coordinate variables for 3-dimensions
    month_wrap_var = data_wrap.createVariable('month',np.int32,('month',))
    lat_wrap_var = data_wrap.createVariable('latitude',np.float32,('latitude',))
    lon_wrap_var = data_wrap.createVariable('longitude',np.float32,('longitude',))

    E_total_wrap_var = data_wrap.createVariable('E',np.float64,('month','latitude','longitude'))
    E_internal_wrap_var = data_wrap.createVariable('E_cpT',np.float64,('month','latitude','longitude'))
    E_latent_wrap_var = data_wrap.createVariable('E_Lvq',np.float64,('month','latitude','longitude'))
    E_geopotential_wrap_var = data_wrap.createVariable('E_gz',np.float64,('month','latitude','longitude'))
    E_kinetic_wrap_var = data_wrap.createVariable('E_u2',np.float64,('month','latitude','longitude'))
    # global attributes
    data_wrap.description = 'Monthly mean meridional energy transport and each component at each grid point'
    # variable attributes
    lat_wrap_var.units = 'degree_north'
    lon_wrap_var.units = 'degree_east'
    E_total_wrap_var.units = 'tera watt'
    E_internal_wrap_var.units = 'tera watt'
    E_latent_wrap_var.units = 'tera watt'
    E_geopotential_wrap_var.units = 'tera watt'
    E_kinetic_wrap_var.units = 'tera watt'

    E_total_wrap_var.long_name = 'atmospheric meridional energy transport'
    E_internal_wrap_var.long_name = 'atmospheric meridional internal energy transport'
    E_latent_wrap_var.long_name = 'atmospheric meridional latent heat transport'
    E_geopotential_wrap_var.long_name = 'atmospheric meridional geopotential transport'
    E_kinetic_wrap_var.long_name = 'atmospheric meridional kinetic transport'
    # writing data
    lat_wrap_var[:] = benchmark.variables['latitude'][:]
    lon_wrap_var[:] = benchmark.variables['longitude'][:]
    month_wrap_var[:] = index_month
    E_total_wrap_var[:] = meridional_E_point_pool
    E_internal_wrap_var[:] = meridional_E_internal_point_pool
    E_latent_wrap_var[:] = meridional_E_latent_point_pool
    E_geopotential_wrap_var[:] = meridional_E_geopotential_point_pool
    E_kinetic_wrap_var[:] = meridional_E_kinetic_point_pool
    # close the file
    data_wrap.close()
    print "Create netcdf file successfully"
    logging.info("The generation of netcdf files for the total meridional energy transport and each component on each grid point is complete!!")

# save output datasets
def create_netcdf_zonal_int (meridional_E_pool,meridional_E_internal_pool,meridional_E_latent_pool,meridional_E_geopotential_pool, meridional_E_kinetic_pool,output_path,year):
    print '*******************************************************************'
    print '*********************** create netcdf file*************************'
    print '*******************************************************************'
    logging.info("Start creating netcdf files for the zonal integral of total meridional energy transport and each component.")
    # wrap the datasets into netcdf file
    # 'NETCDF3_CLASSIC', 'NETCDF3_64BIT', 'NETCDF4_CLASSIC', and 'NETCDF4'
    data_wrap = Dataset(output_path+os.sep+'pressure_daily_075_%d' % (year) + os.sep + 'pressure_daily_075_%d_E_zonal_int.nc' % (year),'w',format = 'NETCDF3_64BIT')
    # create dimensions for netcdf data
    month_wrap_dim = data_wrap.createDimension('month',Dim_month)
    lat_wrap_dim = data_wrap.createDimension('latitude',Dim_latitude)
    # create coordinate variables for 3-dimensions
    month_wrap_var = data_wrap.createVariable('month',np.int32,('month',))
    lat_wrap_var = data_wrap.createVariable('latitude',np.float32,('latitude',))
    # create the actual 3-d variable
    E_total_wrap_var = data_wrap.createVariable('E',np.float64,('month','latitude'))
    E_internal_wrap_var = data_wrap.createVariable('E_cpT',np.float64,('month','latitude'))
    E_latent_wrap_var = data_wrap.createVariable('E_Lvq',np.float64,('month','latitude'))
    E_geopotential_wrap_var = data_wrap.createVariable('E_gz',np.float64,('month','latitude'))
    E_kinetic_wrap_var = data_wrap.createVariable('E_u2',np.float64,('month','latitude'))
    # global attributes
    data_wrap.description = 'Monthly mean zonal integral of meridional energy transport and each component'
    # variable attributes
    lat_wrap_var.units = 'degree_north'
    E_total_wrap_var.units = 'tera watt'
    E_internal_wrap_var.units = 'tera watt'
    E_latent_wrap_var.units = 'tera watt'
    E_geopotential_wrap_var.units = 'tera watt'
    E_kinetic_wrap_var.units = 'tera watt'

    E_total_wrap_var.long_name = 'atmospheric meridional energy transport'
    E_internal_wrap_var.long_name = 'atmospheric meridional internal energy transport'
    E_latent_wrap_var.long_name = 'atmospheric meridional latent heat transport'
    E_geopotential_wrap_var.long_name = 'atmospheric meridional geopotential transport'
    E_kinetic_wrap_var.long_name = 'atmospheric meridional kinetic transport'
    # writing data
    lat_wrap_var[:] = benchmark.variables['latitude'][:]
    month_wrap_var[:] = index_month
    E_total_wrap_var[:] = meridional_E_pool
    E_internal_wrap_var[:] = meridional_E_internal_pool
    E_latent_wrap_var[:] = meridional_E_latent_pool
    E_geopotential_wrap_var[:] = meridional_E_geopotential_pool
    E_kinetic_wrap_var[:] = meridional_E_kinetic_pool
    # close the file
    data_wrap.close()
    print "Create netcdf file successfully"
    #logging.info("The generation of netcdf files for the zonal integral of total meridional energy transport and each component is complete!!")

if __name__=="__main__":
    # create the month index
    period = np.arange(start_year,end_year+1,1)
    index_month = np.arange(1,13,1)
    # create dimensions for saving data
    #Dim_level = len(benchmark.variables['level'][:])
    Dim_latitude = len(benchmark.variables['latitude'][:])
    Dim_longitude = len(benchmark.variables['longitude'][:])
    Dim_month = len(index_month)
    #Dim_year = len(period)
    # data pool for zonal integral
    meridional_E_pool = np.zeros((Dim_month,Dim_latitude),dtype = float)
    meridional_E_internal_pool = np.zeros((Dim_month,Dim_latitude),dtype = float)
    meridional_E_latent_pool = np.zeros((Dim_month,Dim_latitude),dtype = float)
    meridional_E_geopotential_pool = np.zeros((Dim_month,Dim_latitude),dtype = float)
    meridional_E_kinetic_pool = np.zeros((Dim_month,Dim_latitude),dtype = float)
    # data pool for grid point values
    meridional_E_point_pool = np.zeros((Dim_month,Dim_latitude,Dim_longitude),dtype = float)
    meridional_E_internal_point_pool = np.zeros((Dim_month,Dim_latitude,Dim_longitude),dtype = float)
    meridional_E_latent_point_pool = np.zeros((Dim_month,Dim_latitude,Dim_longitude),dtype = float)
    meridional_E_geopotential_point_pool = np.zeros((Dim_month,Dim_latitude,Dim_longitude),dtype = float)
    meridional_E_kinetic_point_pool = np.zeros((Dim_month,Dim_latitude,Dim_longitude),dtype = float)
    # loop for calculation
    for i in period:
        for j in index_month:
            # get the key of each variable
            T_key, q_key, u_key, v_key, z_key = var_key(datapath,i,j)
            # calculate barotropic correction wind based on mass budget correction
            meridional_E, meridional_E_internal, meridional_E_latent, meridional_E_geopotential, meridional_E_kinetic,meridional_E_point, meridional_E_internal_point, meridional_E_latent_point, meridional_E_geopotential_point, meridional_E_kinetic_point = meridional_energy_transport(T_key,q_key,u_key,v_key,z_key)
            # save the total meridional energy and each component to the data pool
            meridional_E_pool[j-1,:] = meridional_E
            meridional_E_internal_pool[j-1,:] = meridional_E_internal
            meridional_E_latent_pool[j-1,:] = meridional_E_latent
            meridional_E_geopotential_pool[j-1,:] = meridional_E_geopotential
            meridional_E_kinetic_pool[j-1,:] = meridional_E_kinetic
            # save the meridional energy on each grid point to the data pool
            meridional_E_point_pool[j-1,:,:] = meridional_E_point
            meridional_E_internal_point_pool[j-1,:,:] = meridional_E_internal_point
            meridional_E_latent_point_pool[j-1,:,:] = meridional_E_latent_point
            meridional_E_geopotential_point_pool[j-1,:,:] = meridional_E_geopotential_point
            meridional_E_kinetic_point_pool[j-1,:,:] = meridional_E_kinetic_point
        # make plots for monthly means
        visualization(meridional_E_pool,meridional_E_internal_pool,meridional_E_latent_pool,meridional_E_geopotential_pool,meridional_E_kinetic_pool,output_path,i)
        # save data as netcdf file
        create_netcdf_zonal_int(meridional_E_pool,meridional_E_internal_pool,meridional_E_latent_pool,meridional_E_geopotential_pool,meridional_E_kinetic_pool,output_path,i)
        create_netcdf_point(meridional_E_point_pool,meridional_E_internal_point_pool,meridional_E_latent_point_pool,meridional_E_geopotential_point_pool,meridional_E_kinetic_point_pool,output_path,i)
    print 'Computation of meridional energy transport on pressure level for ERA-Interim is complete!!!'
    print 'The output is in sleep, safe and sound!!!'

print ("--- %s minutes ---" % ((tttt.time() - start_time)/60))
